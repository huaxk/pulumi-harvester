// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harvester

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/huaxk/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := harvester.LookupImage(ctx, &GetImageArgs{
// 			Name:      "ubuntu20",
// 			Namespace: pulumi.StringRef("harvester-public"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupImage(ctx *pulumi.Context, args *LookupImageArgs, opts ...pulumi.InvokeOption) (*LookupImageResult, error) {
	var rv LookupImageResult
	err := ctx.Invoke("harvester:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type LookupImageArgs struct {
	// A unique name
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getImage.
type LookupImageResult struct {
	// Any text you want that better describes this resource
	Description string `pulumi:"description"`
	DisplayName string `pulumi:"displayName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A unique name
	Name             string                 `pulumi:"name"`
	Namespace        *string                `pulumi:"namespace"`
	Progress         int                    `pulumi:"progress"`
	PvcName          string                 `pulumi:"pvcName"`
	PvcNamespace     string                 `pulumi:"pvcNamespace"`
	Size             int                    `pulumi:"size"`
	SourceType       string                 `pulumi:"sourceType"`
	State            string                 `pulumi:"state"`
	StorageClassName string                 `pulumi:"storageClassName"`
	Tags             map[string]interface{} `pulumi:"tags"`
	// supports the `raw` and `qcow2` image formats which are supported by [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be used and are treated like `raw` images.
	Url string `pulumi:"url"`
}

func LookupImageOutput(ctx *pulumi.Context, args LookupImageOutputArgs, opts ...pulumi.InvokeOption) LookupImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupImageResult, error) {
			args := v.(LookupImageArgs)
			r, err := LookupImage(ctx, &args, opts...)
			var s LookupImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupImageResultOutput)
}

// A collection of arguments for invoking getImage.
type LookupImageOutputArgs struct {
	// A unique name
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (LookupImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type LookupImageResultOutput struct{ *pulumi.OutputState }

func (LookupImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupImageResult)(nil)).Elem()
}

func (o LookupImageResultOutput) ToLookupImageResultOutput() LookupImageResultOutput {
	return o
}

func (o LookupImageResultOutput) ToLookupImageResultOutputWithContext(ctx context.Context) LookupImageResultOutput {
	return o
}

// Any text you want that better describes this resource
func (o LookupImageResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.DisplayName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Id }).(pulumi.StringOutput)
}

// A unique name
func (o LookupImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupImageResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o LookupImageResultOutput) Progress() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.Progress }).(pulumi.IntOutput)
}

func (o LookupImageResultOutput) PvcName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.PvcName }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) PvcNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.PvcNamespace }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LookupImageResult) int { return v.Size }).(pulumi.IntOutput)
}

func (o LookupImageResultOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.SourceType }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) StorageClassName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.StorageClassName }).(pulumi.StringOutput)
}

func (o LookupImageResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupImageResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

// supports the `raw` and `qcow2` image formats which are supported by [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be used and are treated like `raw` images.
func (o LookupImageResultOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v LookupImageResult) string { return v.Url }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupImageResultOutput{})
}
