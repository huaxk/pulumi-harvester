// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package harvester

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type VirtualMachine struct {
	pulumi.CustomResourceState

	Cloudinit VirtualMachineCloudinitPtrOutput `pulumi:"cloudinit"`
	Cpu       pulumi.IntPtrOutput              `pulumi:"cpu"`
	// Any text you want that better describes this resource
	Description pulumi.StringPtrOutput        `pulumi:"description"`
	Disks       VirtualMachineDiskArrayOutput `pulumi:"disks"`
	Hostname    pulumi.StringOutput           `pulumi:"hostname"`
	MachineType pulumi.StringOutput           `pulumi:"machineType"`
	Memory      pulumi.StringPtrOutput        `pulumi:"memory"`
	// A unique name
	Name              pulumi.StringOutput                       `pulumi:"name"`
	Namespace         pulumi.StringPtrOutput                    `pulumi:"namespace"`
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayOutput `pulumi:"networkInterfaces"`
	NodeName          pulumi.StringOutput                       `pulumi:"nodeName"`
	SshKeys           pulumi.StringArrayOutput                  `pulumi:"sshKeys"`
	Start             pulumi.BoolPtrOutput                      `pulumi:"start"`
	State             pulumi.StringOutput                       `pulumi:"state"`
	Tags              pulumi.MapOutput                          `pulumi:"tags"`
}

// NewVirtualMachine registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachine(ctx *pulumi.Context,
	name string, args *VirtualMachineArgs, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Disks == nil {
		return nil, errors.New("invalid value for required argument 'Disks'")
	}
	if args.NetworkInterfaces == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaces'")
	}
	var resource VirtualMachine
	err := ctx.RegisterResource("harvester:index/virtualMachine:VirtualMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachine gets an existing VirtualMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineState, opts ...pulumi.ResourceOption) (*VirtualMachine, error) {
	var resource VirtualMachine
	err := ctx.ReadResource("harvester:index/virtualMachine:VirtualMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachine resources.
type virtualMachineState struct {
	Cloudinit *VirtualMachineCloudinit `pulumi:"cloudinit"`
	Cpu       *int                     `pulumi:"cpu"`
	// Any text you want that better describes this resource
	Description *string              `pulumi:"description"`
	Disks       []VirtualMachineDisk `pulumi:"disks"`
	Hostname    *string              `pulumi:"hostname"`
	MachineType *string              `pulumi:"machineType"`
	Memory      *string              `pulumi:"memory"`
	// A unique name
	Name              *string                          `pulumi:"name"`
	Namespace         *string                          `pulumi:"namespace"`
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	NodeName          *string                          `pulumi:"nodeName"`
	SshKeys           []string                         `pulumi:"sshKeys"`
	Start             *bool                            `pulumi:"start"`
	State             *string                          `pulumi:"state"`
	Tags              map[string]interface{}           `pulumi:"tags"`
}

type VirtualMachineState struct {
	Cloudinit VirtualMachineCloudinitPtrInput
	Cpu       pulumi.IntPtrInput
	// Any text you want that better describes this resource
	Description pulumi.StringPtrInput
	Disks       VirtualMachineDiskArrayInput
	Hostname    pulumi.StringPtrInput
	MachineType pulumi.StringPtrInput
	Memory      pulumi.StringPtrInput
	// A unique name
	Name              pulumi.StringPtrInput
	Namespace         pulumi.StringPtrInput
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	NodeName          pulumi.StringPtrInput
	SshKeys           pulumi.StringArrayInput
	Start             pulumi.BoolPtrInput
	State             pulumi.StringPtrInput
	Tags              pulumi.MapInput
}

func (VirtualMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineState)(nil)).Elem()
}

type virtualMachineArgs struct {
	Cloudinit *VirtualMachineCloudinit `pulumi:"cloudinit"`
	Cpu       *int                     `pulumi:"cpu"`
	// Any text you want that better describes this resource
	Description *string              `pulumi:"description"`
	Disks       []VirtualMachineDisk `pulumi:"disks"`
	Hostname    *string              `pulumi:"hostname"`
	MachineType *string              `pulumi:"machineType"`
	Memory      *string              `pulumi:"memory"`
	// A unique name
	Name              *string                          `pulumi:"name"`
	Namespace         *string                          `pulumi:"namespace"`
	NetworkInterfaces []VirtualMachineNetworkInterface `pulumi:"networkInterfaces"`
	SshKeys           []string                         `pulumi:"sshKeys"`
	Start             *bool                            `pulumi:"start"`
	Tags              map[string]interface{}           `pulumi:"tags"`
}

// The set of arguments for constructing a VirtualMachine resource.
type VirtualMachineArgs struct {
	Cloudinit VirtualMachineCloudinitPtrInput
	Cpu       pulumi.IntPtrInput
	// Any text you want that better describes this resource
	Description pulumi.StringPtrInput
	Disks       VirtualMachineDiskArrayInput
	Hostname    pulumi.StringPtrInput
	MachineType pulumi.StringPtrInput
	Memory      pulumi.StringPtrInput
	// A unique name
	Name              pulumi.StringPtrInput
	Namespace         pulumi.StringPtrInput
	NetworkInterfaces VirtualMachineNetworkInterfaceArrayInput
	SshKeys           pulumi.StringArrayInput
	Start             pulumi.BoolPtrInput
	Tags              pulumi.MapInput
}

func (VirtualMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineArgs)(nil)).Elem()
}

type VirtualMachineInput interface {
	pulumi.Input

	ToVirtualMachineOutput() VirtualMachineOutput
	ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput
}

func (*VirtualMachine) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil))
}

func (i *VirtualMachine) ToVirtualMachineOutput() VirtualMachineOutput {
	return i.ToVirtualMachineOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineOutput)
}

func (i *VirtualMachine) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *VirtualMachine) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

type VirtualMachinePtrInput interface {
	pulumi.Input

	ToVirtualMachinePtrOutput() VirtualMachinePtrOutput
	ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput
}

type virtualMachinePtrType VirtualMachineArgs

func (*virtualMachinePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil))
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return i.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (i *virtualMachinePtrType) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachinePtrOutput)
}

// VirtualMachineArrayInput is an input type that accepts VirtualMachineArray and VirtualMachineArrayOutput values.
// You can construct a concrete instance of `VirtualMachineArrayInput` via:
//
//          VirtualMachineArray{ VirtualMachineArgs{...} }
type VirtualMachineArrayInput interface {
	pulumi.Input

	ToVirtualMachineArrayOutput() VirtualMachineArrayOutput
	ToVirtualMachineArrayOutputWithContext(context.Context) VirtualMachineArrayOutput
}

type VirtualMachineArray []VirtualMachineInput

func (VirtualMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return i.ToVirtualMachineArrayOutputWithContext(context.Background())
}

func (i VirtualMachineArray) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineArrayOutput)
}

// VirtualMachineMapInput is an input type that accepts VirtualMachineMap and VirtualMachineMapOutput values.
// You can construct a concrete instance of `VirtualMachineMapInput` via:
//
//          VirtualMachineMap{ "key": VirtualMachineArgs{...} }
type VirtualMachineMapInput interface {
	pulumi.Input

	ToVirtualMachineMapOutput() VirtualMachineMapOutput
	ToVirtualMachineMapOutputWithContext(context.Context) VirtualMachineMapOutput
}

type VirtualMachineMap map[string]VirtualMachineInput

func (VirtualMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VirtualMachine)(nil)).Elem()
}

func (i VirtualMachineMap) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return i.ToVirtualMachineMapOutputWithContext(context.Background())
}

func (i VirtualMachineMap) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VirtualMachineMapOutput)
}

type VirtualMachineOutput struct{ *pulumi.OutputState }

func (VirtualMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VirtualMachine)(nil))
}

func (o VirtualMachineOutput) ToVirtualMachineOutput() VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachineOutputWithContext(ctx context.Context) VirtualMachineOutput {
	return o
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o.ToVirtualMachinePtrOutputWithContext(context.Background())
}

func (o VirtualMachineOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v VirtualMachine) *VirtualMachine {
		return &v
	}).(VirtualMachinePtrOutput)
}

type VirtualMachinePtrOutput struct{ *pulumi.OutputState }

func (VirtualMachinePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VirtualMachine)(nil))
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutput() VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) ToVirtualMachinePtrOutputWithContext(ctx context.Context) VirtualMachinePtrOutput {
	return o
}

func (o VirtualMachinePtrOutput) Elem() VirtualMachineOutput {
	return o.ApplyT(func(v *VirtualMachine) VirtualMachine {
		if v != nil {
			return *v
		}
		var ret VirtualMachine
		return ret
	}).(VirtualMachineOutput)
}

type VirtualMachineArrayOutput struct{ *pulumi.OutputState }

func (VirtualMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VirtualMachine)(nil))
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutput() VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) ToVirtualMachineArrayOutputWithContext(ctx context.Context) VirtualMachineArrayOutput {
	return o
}

func (o VirtualMachineArrayOutput) Index(i pulumi.IntInput) VirtualMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VirtualMachine {
		return vs[0].([]VirtualMachine)[vs[1].(int)]
	}).(VirtualMachineOutput)
}

type VirtualMachineMapOutput struct{ *pulumi.OutputState }

func (VirtualMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]VirtualMachine)(nil))
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutput() VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) ToVirtualMachineMapOutputWithContext(ctx context.Context) VirtualMachineMapOutput {
	return o
}

func (o VirtualMachineMapOutput) MapIndex(k pulumi.StringInput) VirtualMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) VirtualMachine {
		return vs[0].(map[string]VirtualMachine)[vs[1].(string)]
	}).(VirtualMachineOutput)
}

func init() {
	pulumi.RegisterOutputType(VirtualMachineOutput{})
	pulumi.RegisterOutputType(VirtualMachinePtrOutput{})
	pulumi.RegisterOutputType(VirtualMachineArrayOutput{})
	pulumi.RegisterOutputType(VirtualMachineMapOutput{})
}
