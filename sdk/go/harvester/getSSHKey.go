// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harvester

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/huaxk/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := harvester.LookupSSHKey(ctx, &GetSSHKeyArgs{
// 			Name:      "mysshkey",
// 			Namespace: pulumi.StringRef("default"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupSSHKey(ctx *pulumi.Context, args *LookupSSHKeyArgs, opts ...pulumi.InvokeOption) (*LookupSSHKeyResult, error) {
	var rv LookupSSHKeyResult
	err := ctx.Invoke("harvester:index/getSSHKey:getSSHKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSSHKey.
type LookupSSHKeyArgs struct {
	// A unique name
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getSSHKey.
type LookupSSHKeyResult struct {
	// Any text you want that better describes this resource
	Description string `pulumi:"description"`
	Fingerprint string `pulumi:"fingerprint"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// A unique name
	Name      string                 `pulumi:"name"`
	Namespace *string                `pulumi:"namespace"`
	PublicKey string                 `pulumi:"publicKey"`
	State     string                 `pulumi:"state"`
	Tags      map[string]interface{} `pulumi:"tags"`
}

func LookupSSHKeyOutput(ctx *pulumi.Context, args LookupSSHKeyOutputArgs, opts ...pulumi.InvokeOption) LookupSSHKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSSHKeyResult, error) {
			args := v.(LookupSSHKeyArgs)
			r, err := LookupSSHKey(ctx, &args, opts...)
			var s LookupSSHKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSSHKeyResultOutput)
}

// A collection of arguments for invoking getSSHKey.
type LookupSSHKeyOutputArgs struct {
	// A unique name
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (LookupSSHKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSSHKeyArgs)(nil)).Elem()
}

// A collection of values returned by getSSHKey.
type LookupSSHKeyResultOutput struct{ *pulumi.OutputState }

func (LookupSSHKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSSHKeyResult)(nil)).Elem()
}

func (o LookupSSHKeyResultOutput) ToLookupSSHKeyResultOutput() LookupSSHKeyResultOutput {
	return o
}

func (o LookupSSHKeyResultOutput) ToLookupSSHKeyResultOutputWithContext(ctx context.Context) LookupSSHKeyResultOutput {
	return o
}

// Any text you want that better describes this resource
func (o LookupSSHKeyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupSSHKeyResultOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.Fingerprint }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSSHKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

// A unique name
func (o LookupSSHKeyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupSSHKeyResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o LookupSSHKeyResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

func (o LookupSSHKeyResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupSSHKeyResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupSSHKeyResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSSHKeyResultOutput{})
}
