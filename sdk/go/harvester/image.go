// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package harvester

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Image struct {
	pulumi.CustomResourceState

	// Any text you want that better describes this resource
	Description pulumi.StringPtrOutput `pulumi:"description"`
	DisplayName pulumi.StringOutput    `pulumi:"displayName"`
	// A unique name
	Name             pulumi.StringOutput    `pulumi:"name"`
	Namespace        pulumi.StringPtrOutput `pulumi:"namespace"`
	Progress         pulumi.IntOutput       `pulumi:"progress"`
	Size             pulumi.IntOutput       `pulumi:"size"`
	SourceType       pulumi.StringOutput    `pulumi:"sourceType"`
	State            pulumi.StringOutput    `pulumi:"state"`
	StorageClassName pulumi.StringOutput    `pulumi:"storageClassName"`
	Tags             pulumi.MapOutput       `pulumi:"tags"`
	// supports the `raw` and `qcow2` image formats which are supported by
	// [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be
	// used and are treated like `raw` images.
	Url pulumi.StringPtrOutput `pulumi:"url"`
}

// NewImage registers a new resource with the given unique name, arguments, and options.
func NewImage(ctx *pulumi.Context,
	name string, args *ImageArgs, opts ...pulumi.ResourceOption) (*Image, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.SourceType == nil {
		return nil, errors.New("invalid value for required argument 'SourceType'")
	}
	var resource Image
	err := ctx.RegisterResource("harvester:index/image:Image", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImage gets an existing Image resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImageState, opts ...pulumi.ResourceOption) (*Image, error) {
	var resource Image
	err := ctx.ReadResource("harvester:index/image:Image", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Image resources.
type imageState struct {
	// Any text you want that better describes this resource
	Description *string `pulumi:"description"`
	DisplayName *string `pulumi:"displayName"`
	// A unique name
	Name             *string                `pulumi:"name"`
	Namespace        *string                `pulumi:"namespace"`
	Progress         *int                   `pulumi:"progress"`
	Size             *int                   `pulumi:"size"`
	SourceType       *string                `pulumi:"sourceType"`
	State            *string                `pulumi:"state"`
	StorageClassName *string                `pulumi:"storageClassName"`
	Tags             map[string]interface{} `pulumi:"tags"`
	// supports the `raw` and `qcow2` image formats which are supported by
	// [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be
	// used and are treated like `raw` images.
	Url *string `pulumi:"url"`
}

type ImageState struct {
	// Any text you want that better describes this resource
	Description pulumi.StringPtrInput
	DisplayName pulumi.StringPtrInput
	// A unique name
	Name             pulumi.StringPtrInput
	Namespace        pulumi.StringPtrInput
	Progress         pulumi.IntPtrInput
	Size             pulumi.IntPtrInput
	SourceType       pulumi.StringPtrInput
	State            pulumi.StringPtrInput
	StorageClassName pulumi.StringPtrInput
	Tags             pulumi.MapInput
	// supports the `raw` and `qcow2` image formats which are supported by
	// [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be
	// used and are treated like `raw` images.
	Url pulumi.StringPtrInput
}

func (ImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*imageState)(nil)).Elem()
}

type imageArgs struct {
	// Any text you want that better describes this resource
	Description *string `pulumi:"description"`
	DisplayName string  `pulumi:"displayName"`
	// A unique name
	Name       *string                `pulumi:"name"`
	Namespace  *string                `pulumi:"namespace"`
	SourceType string                 `pulumi:"sourceType"`
	Tags       map[string]interface{} `pulumi:"tags"`
	// supports the `raw` and `qcow2` image formats which are supported by
	// [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be
	// used and are treated like `raw` images.
	Url *string `pulumi:"url"`
}

// The set of arguments for constructing a Image resource.
type ImageArgs struct {
	// Any text you want that better describes this resource
	Description pulumi.StringPtrInput
	DisplayName pulumi.StringInput
	// A unique name
	Name       pulumi.StringPtrInput
	Namespace  pulumi.StringPtrInput
	SourceType pulumi.StringInput
	Tags       pulumi.MapInput
	// supports the `raw` and `qcow2` image formats which are supported by
	// [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be
	// used and are treated like `raw` images.
	Url pulumi.StringPtrInput
}

func (ImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*imageArgs)(nil)).Elem()
}

type ImageInput interface {
	pulumi.Input

	ToImageOutput() ImageOutput
	ToImageOutputWithContext(ctx context.Context) ImageOutput
}

func (*Image) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil))
}

func (i *Image) ToImageOutput() ImageOutput {
	return i.ToImageOutputWithContext(context.Background())
}

func (i *Image) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageOutput)
}

func (i *Image) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *Image) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

type ImagePtrInput interface {
	pulumi.Input

	ToImagePtrOutput() ImagePtrOutput
	ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput
}

type imagePtrType ImageArgs

func (*imagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil))
}

func (i *imagePtrType) ToImagePtrOutput() ImagePtrOutput {
	return i.ToImagePtrOutputWithContext(context.Background())
}

func (i *imagePtrType) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagePtrOutput)
}

// ImageArrayInput is an input type that accepts ImageArray and ImageArrayOutput values.
// You can construct a concrete instance of `ImageArrayInput` via:
//
//          ImageArray{ ImageArgs{...} }
type ImageArrayInput interface {
	pulumi.Input

	ToImageArrayOutput() ImageArrayOutput
	ToImageArrayOutputWithContext(context.Context) ImageArrayOutput
}

type ImageArray []ImageInput

func (ImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Image)(nil)).Elem()
}

func (i ImageArray) ToImageArrayOutput() ImageArrayOutput {
	return i.ToImageArrayOutputWithContext(context.Background())
}

func (i ImageArray) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageArrayOutput)
}

// ImageMapInput is an input type that accepts ImageMap and ImageMapOutput values.
// You can construct a concrete instance of `ImageMapInput` via:
//
//          ImageMap{ "key": ImageArgs{...} }
type ImageMapInput interface {
	pulumi.Input

	ToImageMapOutput() ImageMapOutput
	ToImageMapOutputWithContext(context.Context) ImageMapOutput
}

type ImageMap map[string]ImageInput

func (ImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Image)(nil)).Elem()
}

func (i ImageMap) ToImageMapOutput() ImageMapOutput {
	return i.ToImageMapOutputWithContext(context.Background())
}

func (i ImageMap) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageMapOutput)
}

type ImageOutput struct{ *pulumi.OutputState }

func (ImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Image)(nil))
}

func (o ImageOutput) ToImageOutput() ImageOutput {
	return o
}

func (o ImageOutput) ToImageOutputWithContext(ctx context.Context) ImageOutput {
	return o
}

func (o ImageOutput) ToImagePtrOutput() ImagePtrOutput {
	return o.ToImagePtrOutputWithContext(context.Background())
}

func (o ImageOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Image) *Image {
		return &v
	}).(ImagePtrOutput)
}

type ImagePtrOutput struct{ *pulumi.OutputState }

func (ImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Image)(nil))
}

func (o ImagePtrOutput) ToImagePtrOutput() ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) ToImagePtrOutputWithContext(ctx context.Context) ImagePtrOutput {
	return o
}

func (o ImagePtrOutput) Elem() ImageOutput {
	return o.ApplyT(func(v *Image) Image {
		if v != nil {
			return *v
		}
		var ret Image
		return ret
	}).(ImageOutput)
}

type ImageArrayOutput struct{ *pulumi.OutputState }

func (ImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Image)(nil))
}

func (o ImageArrayOutput) ToImageArrayOutput() ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) ToImageArrayOutputWithContext(ctx context.Context) ImageArrayOutput {
	return o
}

func (o ImageArrayOutput) Index(i pulumi.IntInput) ImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Image {
		return vs[0].([]Image)[vs[1].(int)]
	}).(ImageOutput)
}

type ImageMapOutput struct{ *pulumi.OutputState }

func (ImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Image)(nil))
}

func (o ImageMapOutput) ToImageMapOutput() ImageMapOutput {
	return o
}

func (o ImageMapOutput) ToImageMapOutputWithContext(ctx context.Context) ImageMapOutput {
	return o
}

func (o ImageMapOutput) MapIndex(k pulumi.StringInput) ImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Image {
		return vs[0].(map[string]Image)[vs[1].(string)]
	}).(ImageOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageOutput{})
	pulumi.RegisterOutputType(ImagePtrOutput{})
	pulumi.RegisterOutputType(ImageArrayOutput{})
	pulumi.RegisterOutputType(ImageMapOutput{})
}
