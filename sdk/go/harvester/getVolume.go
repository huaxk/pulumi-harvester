// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package harvester

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/huaxk/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi-harvester/sdk/go/harvester"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := harvester.LookupVolume(ctx, &GetVolumeArgs{
// 			Name:      "ubuntu20-dev-mount-disk",
// 			Namespace: pulumi.StringRef("default"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupVolume(ctx *pulumi.Context, args *LookupVolumeArgs, opts ...pulumi.InvokeOption) (*LookupVolumeResult, error) {
	var rv LookupVolumeResult
	err := ctx.Invoke("harvester:index/getVolume:getVolume", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolume.
type LookupVolumeArgs struct {
	// A unique name
	Name      string  `pulumi:"name"`
	Namespace *string `pulumi:"namespace"`
}

// A collection of values returned by getVolume.
type LookupVolumeResult struct {
	AccessMode string `pulumi:"accessMode"`
	AttachedVm string `pulumi:"attachedVm"`
	// Any text you want that better describes this resource
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id    string `pulumi:"id"`
	Image string `pulumi:"image"`
	// A unique name
	Name             string                 `pulumi:"name"`
	Namespace        *string                `pulumi:"namespace"`
	Phase            string                 `pulumi:"phase"`
	Size             string                 `pulumi:"size"`
	State            string                 `pulumi:"state"`
	StorageClassName string                 `pulumi:"storageClassName"`
	Tags             map[string]interface{} `pulumi:"tags"`
	VolumeMode       string                 `pulumi:"volumeMode"`
}

func LookupVolumeOutput(ctx *pulumi.Context, args LookupVolumeOutputArgs, opts ...pulumi.InvokeOption) LookupVolumeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVolumeResult, error) {
			args := v.(LookupVolumeArgs)
			r, err := LookupVolume(ctx, &args, opts...)
			var s LookupVolumeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVolumeResultOutput)
}

// A collection of arguments for invoking getVolume.
type LookupVolumeOutputArgs struct {
	// A unique name
	Name      pulumi.StringInput    `pulumi:"name"`
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (LookupVolumeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeArgs)(nil)).Elem()
}

// A collection of values returned by getVolume.
type LookupVolumeResultOutput struct{ *pulumi.OutputState }

func (LookupVolumeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVolumeResult)(nil)).Elem()
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutput() LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) ToLookupVolumeResultOutputWithContext(ctx context.Context) LookupVolumeResultOutput {
	return o
}

func (o LookupVolumeResultOutput) AccessMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.AccessMode }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) AttachedVm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.AttachedVm }).(pulumi.StringOutput)
}

// Any text you want that better describes this resource
func (o LookupVolumeResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupVolumeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Image() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Image }).(pulumi.StringOutput)
}

// A unique name
func (o LookupVolumeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVolumeResult) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

func (o LookupVolumeResultOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Phase }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.Size }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.State }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) StorageClassName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.StorageClassName }).(pulumi.StringOutput)
}

func (o LookupVolumeResultOutput) Tags() pulumi.MapOutput {
	return o.ApplyT(func(v LookupVolumeResult) map[string]interface{} { return v.Tags }).(pulumi.MapOutput)
}

func (o LookupVolumeResultOutput) VolumeMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVolumeResult) string { return v.VolumeMode }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVolumeResultOutput{})
}
