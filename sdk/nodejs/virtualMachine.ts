// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class VirtualMachine extends pulumi.CustomResource {
    /**
     * Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualMachineState, opts?: pulumi.CustomResourceOptions): VirtualMachine {
        return new VirtualMachine(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harvester:index/virtualMachine:VirtualMachine';

    /**
     * Returns true if the given object is an instance of VirtualMachine.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualMachine {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualMachine.__pulumiType;
    }

    public readonly cloudinit!: pulumi.Output<outputs.VirtualMachineCloudinit | undefined>;
    public readonly cpu!: pulumi.Output<number | undefined>;
    /**
     * Any text you want that better describes this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly disks!: pulumi.Output<outputs.VirtualMachineDisk[]>;
    public readonly hostname!: pulumi.Output<string>;
    public readonly machineType!: pulumi.Output<string>;
    public readonly memory!: pulumi.Output<string | undefined>;
    /**
     * A unique name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public readonly networkInterfaces!: pulumi.Output<outputs.VirtualMachineNetworkInterface[]>;
    public /*out*/ readonly nodeName!: pulumi.Output<string>;
    public readonly sshKeys!: pulumi.Output<string[] | undefined>;
    public readonly start!: pulumi.Output<boolean | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a VirtualMachine resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualMachineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualMachineArgs | VirtualMachineState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualMachineState | undefined;
            inputs["cloudinit"] = state ? state.cloudinit : undefined;
            inputs["cpu"] = state ? state.cpu : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disks"] = state ? state.disks : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["machineType"] = state ? state.machineType : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespace"] = state ? state.namespace : undefined;
            inputs["networkInterfaces"] = state ? state.networkInterfaces : undefined;
            inputs["nodeName"] = state ? state.nodeName : undefined;
            inputs["sshKeys"] = state ? state.sshKeys : undefined;
            inputs["start"] = state ? state.start : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as VirtualMachineArgs | undefined;
            if ((!args || args.disks === undefined) && !opts.urn) {
                throw new Error("Missing required property 'disks'");
            }
            if ((!args || args.networkInterfaces === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaces'");
            }
            inputs["cloudinit"] = args ? args.cloudinit : undefined;
            inputs["cpu"] = args ? args.cpu : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["machineType"] = args ? args.machineType : undefined;
            inputs["memory"] = args ? args.memory : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespace"] = args ? args.namespace : undefined;
            inputs["networkInterfaces"] = args ? args.networkInterfaces : undefined;
            inputs["sshKeys"] = args ? args.sshKeys : undefined;
            inputs["start"] = args ? args.start : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["nodeName"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(VirtualMachine.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualMachine resources.
 */
export interface VirtualMachineState {
    cloudinit?: pulumi.Input<inputs.VirtualMachineCloudinit>;
    cpu?: pulumi.Input<number>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    disks?: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    hostname?: pulumi.Input<string>;
    machineType?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    networkInterfaces?: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    nodeName?: pulumi.Input<string>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    start?: pulumi.Input<boolean>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a VirtualMachine resource.
 */
export interface VirtualMachineArgs {
    cloudinit?: pulumi.Input<inputs.VirtualMachineCloudinit>;
    cpu?: pulumi.Input<number>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    disks: pulumi.Input<pulumi.Input<inputs.VirtualMachineDisk>[]>;
    hostname?: pulumi.Input<string>;
    machineType?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    networkInterfaces: pulumi.Input<pulumi.Input<inputs.VirtualMachineNetworkInterface>[]>;
    sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    start?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{[key: string]: any}>;
}
