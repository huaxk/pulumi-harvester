// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harvester from "@pulumi/harvester";
 *
 * const ubuntu20_dev_mount_disk = new harvester.Volume("ubuntu20-dev-mount-disk", {
 *     namespace: "default",
 *     size: "10Gi",
 * });
 * const ubuntu20_dev_image_disk = new harvester.Volume("ubuntu20-dev-image-disk", {
 *     image: "harvester-public/ubuntu20",
 *     namespace: "default",
 *     size: "10Gi",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import harvester:index/volume:Volume foo <Namespace>/<Name>
 * ```
 */
export class Volume extends pulumi.CustomResource {
    /**
     * Get an existing Volume resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeState, opts?: pulumi.CustomResourceOptions): Volume {
        return new Volume(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harvester:index/volume:Volume';

    /**
     * Returns true if the given object is an instance of Volume.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Volume {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Volume.__pulumiType;
    }

    public readonly accessMode!: pulumi.Output<string | undefined>;
    public /*out*/ readonly attachedVm!: pulumi.Output<string>;
    /**
     * Any text you want that better describes this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly image!: pulumi.Output<string | undefined>;
    /**
     * A unique name
     */
    public readonly name!: pulumi.Output<string>;
    public readonly namespace!: pulumi.Output<string | undefined>;
    public /*out*/ readonly phase!: pulumi.Output<string>;
    public readonly size!: pulumi.Output<string | undefined>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly storageClassName!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly volumeMode!: pulumi.Output<string | undefined>;

    /**
     * Create a Volume resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VolumeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeArgs | VolumeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeState | undefined;
            resourceInputs["accessMode"] = state ? state.accessMode : undefined;
            resourceInputs["attachedVm"] = state ? state.attachedVm : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["image"] = state ? state.image : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["phase"] = state ? state.phase : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["storageClassName"] = state ? state.storageClassName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["volumeMode"] = state ? state.volumeMode : undefined;
        } else {
            const args = argsOrState as VolumeArgs | undefined;
            resourceInputs["accessMode"] = args ? args.accessMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["size"] = args ? args.size : undefined;
            resourceInputs["storageClassName"] = args ? args.storageClassName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["volumeMode"] = args ? args.volumeMode : undefined;
            resourceInputs["attachedVm"] = undefined /*out*/;
            resourceInputs["phase"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Volume.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Volume resources.
 */
export interface VolumeState {
    accessMode?: pulumi.Input<string>;
    attachedVm?: pulumi.Input<string>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    phase?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    storageClassName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    volumeMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Volume resource.
 */
export interface VolumeArgs {
    accessMode?: pulumi.Input<string>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    namespace?: pulumi.Input<string>;
    size?: pulumi.Input<string>;
    storageClassName?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
    volumeMode?: pulumi.Input<string>;
}
