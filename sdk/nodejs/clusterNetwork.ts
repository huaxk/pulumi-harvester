// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as harvester from "@pulumi/harvester";
 *
 * const vlan = new harvester.ClusterNetwork("vlan", {
 *     defaultPhysicalNic: "harvester-mgmt",
 *     enable: true,
 * });
 * ```
 *
 * ## Import
 *
 * # There is a vlan clusternetwork in Harvester clusters by default # Import it before manage it # And don't destroy it after imported
 *
 * ```sh
 *  $ pulumi import harvester:index/clusterNetwork:ClusterNetwork vlan vlan
 * ```
 */
export class ClusterNetwork extends pulumi.CustomResource {
    /**
     * Get an existing ClusterNetwork resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterNetworkState, opts?: pulumi.CustomResourceOptions): ClusterNetwork {
        return new ClusterNetwork(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'harvester:index/clusterNetwork:ClusterNetwork';

    /**
     * Returns true if the given object is an instance of ClusterNetwork.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterNetwork {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterNetwork.__pulumiType;
    }

    public readonly defaultPhysicalNic!: pulumi.Output<string | undefined>;
    /**
     * Any text you want that better describes this resource
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * A unique name
     */
    public readonly name!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly tags!: pulumi.Output<{[key: string]: any} | undefined>;

    /**
     * Create a ClusterNetwork resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterNetworkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterNetworkArgs | ClusterNetworkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterNetworkState | undefined;
            resourceInputs["defaultPhysicalNic"] = state ? state.defaultPhysicalNic : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ClusterNetworkArgs | undefined;
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            resourceInputs["defaultPhysicalNic"] = args ? args.defaultPhysicalNic : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterNetwork.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterNetwork resources.
 */
export interface ClusterNetworkState {
    defaultPhysicalNic?: pulumi.Input<string>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    enable?: pulumi.Input<boolean>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
}

/**
 * The set of arguments for constructing a ClusterNetwork resource.
 */
export interface ClusterNetworkArgs {
    defaultPhysicalNic?: pulumi.Input<string>;
    /**
     * Any text you want that better describes this resource
     */
    description?: pulumi.Input<string>;
    enable: pulumi.Input<boolean>;
    /**
     * A unique name
     */
    name?: pulumi.Input<string>;
    tags?: pulumi.Input<{[key: string]: any}>;
}
