// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harvester
{
    public static class GetImage
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ubuntu20 = Output.Create(Harvester.GetImage.InvokeAsync(new Harvester.GetImageArgs
        ///         {
        ///             Name = "ubuntu20",
        ///             Namespace = "harvester-public",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetImageResult> InvokeAsync(GetImageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetImageResult>("harvester:index/getImage:getImage", args ?? new GetImageArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ubuntu20 = Output.Create(Harvester.GetImage.InvokeAsync(new Harvester.GetImageArgs
        ///         {
        ///             Name = "ubuntu20",
        ///             Namespace = "harvester-public",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetImageResult> Invoke(GetImageInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetImageResult>("harvester:index/getImage:getImage", args ?? new GetImageInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetImageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetImageArgs()
        {
        }
    }

    public sealed class GetImageInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetImageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetImageResult
    {
        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        public readonly string Description;
        public readonly string DisplayName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique name
        /// </summary>
        public readonly string Name;
        public readonly string? Namespace;
        public readonly int Progress;
        public readonly string PvcName;
        public readonly string PvcNamespace;
        public readonly int Size;
        public readonly string SourceType;
        public readonly string State;
        public readonly string StorageClassName;
        public readonly ImmutableDictionary<string, object> Tags;
        /// <summary>
        /// supports the `raw` and `qcow2` image formats which are supported by [qemu](https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats). Bootable ISO images can also be used and are treated like `raw` images.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private GetImageResult(
            string description,

            string displayName,

            string id,

            string name,

            string? @namespace,

            int progress,

            string pvcName,

            string pvcNamespace,

            int size,

            string sourceType,

            string state,

            string storageClassName,

            ImmutableDictionary<string, object> tags,

            string url)
        {
            Description = description;
            DisplayName = displayName;
            Id = id;
            Name = name;
            Namespace = @namespace;
            Progress = progress;
            PvcName = pvcName;
            PvcNamespace = pvcNamespace;
            Size = size;
            SourceType = sourceType;
            State = state;
            StorageClassName = storageClassName;
            Tags = tags;
            Url = url;
        }
    }
}
