// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harvester
{
    public static class GetClusterNetwork
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var vlan = Output.Create(Harvester.GetClusterNetwork.InvokeAsync(new Harvester.GetClusterNetworkArgs
        ///         {
        ///             Name = "vlan",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetClusterNetworkResult> InvokeAsync(GetClusterNetworkArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetClusterNetworkResult>("harvester:index/getClusterNetwork:getClusterNetwork", args ?? new GetClusterNetworkArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var vlan = Output.Create(Harvester.GetClusterNetwork.InvokeAsync(new Harvester.GetClusterNetworkArgs
        ///         {
        ///             Name = "vlan",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetClusterNetworkResult> Invoke(GetClusterNetworkInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetClusterNetworkResult>("harvester:index/getClusterNetwork:getClusterNetwork", args ?? new GetClusterNetworkInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetClusterNetworkArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetClusterNetworkArgs()
        {
        }
    }

    public sealed class GetClusterNetworkInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetClusterNetworkInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetClusterNetworkResult
    {
        public readonly string DefaultPhysicalNic;
        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        public readonly string Description;
        public readonly bool Enable;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// A unique name
        /// </summary>
        public readonly string Name;
        public readonly string State;
        public readonly ImmutableDictionary<string, object> Tags;

        [OutputConstructor]
        private GetClusterNetworkResult(
            string defaultPhysicalNic,

            string description,

            bool enable,

            string id,

            string name,

            string state,

            ImmutableDictionary<string, object> tags)
        {
            DefaultPhysicalNic = defaultPhysicalNic;
            Description = description;
            Enable = enable;
            Id = id;
            Name = name;
            State = state;
            Tags = tags;
        }
    }
}
