// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harvester
{
    public static class GetVirtualMachine
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ubuntu20_dev = Output.Create(Harvester.GetVirtualMachine.InvokeAsync(new Harvester.GetVirtualMachineArgs
        ///         {
        ///             Name = "ubuntu-dev",
        ///             Namespace = "default",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVirtualMachineResult> InvokeAsync(GetVirtualMachineArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVirtualMachineResult>("harvester:index/getVirtualMachine:getVirtualMachine", args ?? new GetVirtualMachineArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Harvester = Pulumi.Harvester;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var ubuntu20_dev = Output.Create(Harvester.GetVirtualMachine.InvokeAsync(new Harvester.GetVirtualMachineArgs
        ///         {
        ///             Name = "ubuntu-dev",
        ///             Namespace = "default",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVirtualMachineResult> Invoke(GetVirtualMachineInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVirtualMachineResult>("harvester:index/getVirtualMachine:getVirtualMachine", args ?? new GetVirtualMachineInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVirtualMachineArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("namespace")]
        public string? Namespace { get; set; }

        public GetVirtualMachineArgs()
        {
        }
    }

    public sealed class GetVirtualMachineInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public GetVirtualMachineInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVirtualMachineResult
    {
        public readonly ImmutableArray<Outputs.GetVirtualMachineCloudinitResult> Cloudinits;
        public readonly int Cpu;
        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        public readonly string Description;
        public readonly ImmutableArray<Outputs.GetVirtualMachineDiskResult> Disks;
        public readonly string Hostname;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string MachineType;
        public readonly string Memory;
        /// <summary>
        /// A unique name
        /// </summary>
        public readonly string Name;
        public readonly string? Namespace;
        public readonly ImmutableArray<Outputs.GetVirtualMachineNetworkInterfaceResult> NetworkInterfaces;
        public readonly string NodeName;
        public readonly ImmutableArray<string> SshKeys;
        public readonly bool Start;
        public readonly string State;
        public readonly ImmutableDictionary<string, object> Tags;

        [OutputConstructor]
        private GetVirtualMachineResult(
            ImmutableArray<Outputs.GetVirtualMachineCloudinitResult> cloudinits,

            int cpu,

            string description,

            ImmutableArray<Outputs.GetVirtualMachineDiskResult> disks,

            string hostname,

            string id,

            string machineType,

            string memory,

            string name,

            string? @namespace,

            ImmutableArray<Outputs.GetVirtualMachineNetworkInterfaceResult> networkInterfaces,

            string nodeName,

            ImmutableArray<string> sshKeys,

            bool start,

            string state,

            ImmutableDictionary<string, object> tags)
        {
            Cloudinits = cloudinits;
            Cpu = cpu;
            Description = description;
            Disks = disks;
            Hostname = hostname;
            Id = id;
            MachineType = machineType;
            Memory = memory;
            Name = name;
            Namespace = @namespace;
            NetworkInterfaces = networkInterfaces;
            NodeName = nodeName;
            SshKeys = sshKeys;
            Start = start;
            State = state;
            Tags = tags;
        }
    }
}
