// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Harvester
{
    [HarvesterResourceType("harvester:index/virtualMachine:VirtualMachine")]
    public partial class VirtualMachine : Pulumi.CustomResource
    {
        [Output("cloudinit")]
        public Output<Outputs.VirtualMachineCloudinit?> Cloudinit { get; private set; } = null!;

        [Output("cpu")]
        public Output<int?> Cpu { get; private set; } = null!;

        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.VirtualMachineDisk>> Disks { get; private set; } = null!;

        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        [Output("machineType")]
        public Output<string> MachineType { get; private set; } = null!;

        [Output("memory")]
        public Output<string?> Memory { get; private set; } = null!;

        /// <summary>
        /// A unique name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("namespace")]
        public Output<string?> Namespace { get; private set; } = null!;

        [Output("networkInterfaces")]
        public Output<ImmutableArray<Outputs.VirtualMachineNetworkInterface>> NetworkInterfaces { get; private set; } = null!;

        [Output("nodeName")]
        public Output<string> NodeName { get; private set; } = null!;

        [Output("sshKeys")]
        public Output<ImmutableArray<string>> SshKeys { get; private set; } = null!;

        [Output("start")]
        public Output<bool?> Start { get; private set; } = null!;

        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("harvester:index/virtualMachine:VirtualMachine", name, args ?? new VirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
            : base("harvester:index/virtualMachine:VirtualMachine", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, VirtualMachineState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, state, options);
        }
    }

    public sealed class VirtualMachineArgs : Pulumi.ResourceArgs
    {
        [Input("cloudinit")]
        public Input<Inputs.VirtualMachineCloudinitArgs>? Cloudinit { get; set; }

        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks", required: true)]
        private InputList<Inputs.VirtualMachineDiskArgs>? _disks;
        public InputList<Inputs.VirtualMachineDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskArgs>());
            set => _disks = value;
        }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("networkInterfaces", required: true)]
        private InputList<Inputs.VirtualMachineNetworkInterfaceArgs>? _networkInterfaces;
        public InputList<Inputs.VirtualMachineNetworkInterfaceArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineNetworkInterfaceArgs>());
            set => _networkInterfaces = value;
        }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("start")]
        public Input<bool>? Start { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VirtualMachineArgs()
        {
        }
    }

    public sealed class VirtualMachineState : Pulumi.ResourceArgs
    {
        [Input("cloudinit")]
        public Input<Inputs.VirtualMachineCloudinitGetArgs>? Cloudinit { get; set; }

        [Input("cpu")]
        public Input<int>? Cpu { get; set; }

        /// <summary>
        /// Any text you want that better describes this resource
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("disks")]
        private InputList<Inputs.VirtualMachineDiskGetArgs>? _disks;
        public InputList<Inputs.VirtualMachineDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.VirtualMachineDiskGetArgs>());
            set => _disks = value;
        }

        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("machineType")]
        public Input<string>? MachineType { get; set; }

        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// A unique name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        [Input("networkInterfaces")]
        private InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs>? _networkInterfaces;
        public InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs> NetworkInterfaces
        {
            get => _networkInterfaces ?? (_networkInterfaces = new InputList<Inputs.VirtualMachineNetworkInterfaceGetArgs>());
            set => _networkInterfaces = value;
        }

        [Input("nodeName")]
        public Input<string>? NodeName { get; set; }

        [Input("sshKeys")]
        private InputList<string>? _sshKeys;
        public InputList<string> SshKeys
        {
            get => _sshKeys ?? (_sshKeys = new InputList<string>());
            set => _sshKeys = value;
        }

        [Input("start")]
        public Input<bool>? Start { get; set; }

        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object> Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public VirtualMachineState()
        {
        }
    }
}
